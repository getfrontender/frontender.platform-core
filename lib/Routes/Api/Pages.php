<?php

namespace Frontender\Core\Routes\Api;

use Frontender\Core\Controllers\Pages\Revisions;
use Frontender\Core\DB\Adapter;
use Frontender\Core\Routes\Helpers\CoreRoute;
use Frontender\Core\Routes\Traits\Authorizable;
use Slim\Http\Request;
use Slim\Http\Response;

class Pages extends CoreRoute {
	protected $group = '/api/pages';

	use Authorizable;

	protected function registerCreateRoutes() {
		parent::registerCreateRoutes(); // TODO: Change the autogenerated stub

		$this->app->put( '/revision', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				Revisions::create( $request->getParsedBody() )
			);

			return $response->withJson( $json );
		} );

		$this->app->put( '/{lot_id}/trash', function ( Request $request, Response $response ) {
			// Remove the published page, and move all revisions to the trash.
			\Frontender\Core\Controllers\Pages::delete( $request->getAttribute( 'lot_id' ), 'public' );
			Revisions::delete( $request->getAttribute( 'lot_id' ) );

			return $response->withStatus( 200 );
		} );

		$this->app->put( '/{page_id}/public', function ( Request $request, Response $response ) {
			$page = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( $request->getAttribute('page_id'))
			);
			$page = array_shift($page);

			\Frontender\Core\Controllers\Pages::publish($page);

			return $response->withStatus(200);
		} );
	}

	protected function registerReadRoutes() {
		parent::registerReadRoutes();

		$this->app->get( '', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => $request->getQueryParam( 'collection' ),
					'lot'        => $request->getQueryParam( 'lot' )
				] )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/public', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => 'public'
				] )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{page_id}', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::read( $request->getAttribute( 'page_id' ) )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{lot_id}/public', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				Revisions::read( $request->getAttribute( 'lot_id' ), 'public' )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{lot_id}/revision', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				Revisions::read( $request->getAttribute( 'lot_id' ), $request->getQueryParam( 'revision', 'last' ) )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{lot_id}/trash', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => 'trash',
					'lot'        => $request->getAttribute( 'lot_id' )
				] )
			);

			return $response->withJson( $json );
		} );
	}

	protected function registerUpdateRoutes() {
		parent::registerUpdateRoutes();

		$this->app->post( '/{lot_id}', function ( Request $request, Response $response ) {
			$data = \Frontender\Core\Controllers\Pages::update( $request->getAttribute( 'lot_id' ), $request->getParsedBody() );

			var_dump( $data );
			echo '<pre>';
			print_r( $data );
			echo '</pre>';
			die();
		} );
	}

	public function registerDeleteRoutes() {
		parent::registerDeleteRoutes();

		$this->app->delete( '/{lot_id}/public', function ( Request $request, Response $response ) {
			\Frontender\Core\Controllers\Pages::delete( $request->getAttribute( 'lot_id' ), 'public' );

			return $response->withStatus( 200 );
		} );
	}
}
<?php

namespace Frontender\Core\Routes\Api;

use Frontender\Core\Controllers\Pages\Revisions;
use Frontender\Core\DB\Adapter;
use Frontender\Core\Routes\Helpers\CoreRoute;
use Frontender\Core\Routes\Traits\Authorizable;
use MongoDB\BSON\ObjectId;
use Slim\Http\Request;
use Slim\Http\Response;

class Pages extends CoreRoute {
	protected $group = '/api/pages';

	use Authorizable;

	protected function registerCreateRoutes() {
		parent::registerCreateRoutes(); // TODO: Change the autogenerated stub

		$this->app->put( '/{lot_id}/revision', function ( Request $request, Response $response ) {
			$json = $request->getParsedBody();
			$json = Revisions::add( $json );

			return $response->withJson( $json );
		} );

		$this->app->put( '/{lot_id}/trash', function ( Request $request, Response $response ) {
			// Remove the published page, and move all revisions to the trash.
			\Frontender\Core\Controllers\Pages::delete( $request->getAttribute( 'lot_id' ), 'public' );
			Revisions::delete( $request->getAttribute( 'lot_id' ) );

			return $response->withStatus( 200 );
		} );

		$this->app->put( '/{page_id}/public', function ( Request $request, Response $response ) {
			$page = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( $request->getAttribute('page_id'))
			);
			$page = array_shift($page);

			\Frontender\Core\Controllers\Pages::publish($page);

			return $response->withStatus(200);
		} );
	}

	protected function registerReadRoutes() {
		parent::registerReadRoutes();

		$this->app->get( '', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => $request->getQueryParam( 'collection' ),
					'lot'        => $request->getQueryParam( 'lot' )
				] )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/public', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => 'public'
				] )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{page_id}', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::read( $request->getAttribute( 'page_id' ) )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{page_id}/preview', function ( Request $request, Response $response) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::read( $request->getAttribute( 'page_id' ) )
			);
			$json = json_decode(json_encode($json), true);
			$json = \Frontender\Core\Controllers\Pages::sanitize($json['definition']);

			try {
				$page = $this->page;
				$this->language->set($request->getQueryParam('locale'));
//			$page->setName($attributes['page']);
//			$page->setParameters(['debug' => $this->settings['debug'], 'query' => $request->getQueryParams()]);
				$page->setData( $json );
				$page->setRequest( $request );
				$page->parseData();

				$response->getBody()->write($page->render());
			} catch (\Exception $e) {
				echo $e->getMessage();
				die('Called');
			} catch (\Error $e) {
				echo $e->getMessage();
				die('Called2');
			}

			return $response;
		});

		$this->app->get( '/{lot_id}/public', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				Revisions::read( $request->getAttribute( 'lot_id' ), 'public' )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{lot_id}/revision', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				Revisions::read( $request->getAttribute( 'lot_id' ), $request->getQueryParam( 'revision', 'last' ) )
			);

			return $response->withJson( $json );
		} );

		$this->app->get( '/{lot_id}/trash', function ( Request $request, Response $response ) {
			$json = Adapter::getInstance()->toJSON(
				\Frontender\Core\Controllers\Pages::browse( [
					'collection' => 'trash',
					'lot'        => $request->getAttribute( 'lot_id' )
				] )
			);

			return $response->withJson( $json );
		} );
	}

	protected function registerUpdateRoutes() {
		parent::registerUpdateRoutes();

		$this->app->post( '/{lot_id}', function ( Request $request, Response $response ) {
			$data = \Frontender\Core\Controllers\Pages::update( $request->getAttribute( 'lot_id' ), $request->getParsedBody() );
		} );
		
		$this->app->post( '/{page_id}/revision', function ( Request $request, Response $response ) {
			$body = $request->getParsedBody();
			$body['_id'] = new ObjectId($body['_id']);

			Adapter::getInstance()->collection('pages')->findOneAndReplace([
				'_id' => $body['_id']
			], $body);

			$body['_id'] = $body['_id']->__toString();

			return $response->withJson($body);
		} );
	}

	public function registerDeleteRoutes() {
		parent::registerDeleteRoutes();

		$this->app->delete( '/{lot_id}/public', function ( Request $request, Response $response ) {
			\Frontender\Core\Controllers\Pages::delete( $request->getAttribute( 'lot_id' ), 'public' );

			return $response->withStatus( 200 );
		} );
	}
}
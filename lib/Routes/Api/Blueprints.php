<?php
/*******************************************************
 * @copyright 2017-2019 Dipity B.V., The Netherlands
 * @package Frontender
 * @subpackage Frontender Platform Core
 *
 * Frontender is a web application development platform consisting of a
 * desktop application (Frontender Desktop) and a web application which
 * consists of a client component (Frontender Platform) and a core
 * component (Frontender Platform Core).
 *
 * Frontender Desktop, Frontender Platform and Frontender Platform Core
 * may not be copied and/or distributed without the express
 * permission of Dipity B.V.
 *******************************************************/

namespace Frontender\Core\Routes\Api;

use Frontender\Core\DB\Adapter;
use Frontender\Core\Routes\Helpers\CoreRoute;
use Frontender\Core\Routes\Traits\Authorizable;
use Slim\Http\Request;
use Slim\Http\Response;
use MongoDB\BSON\ObjectId;
use Frontender\Core\Routes\Middleware\TokenCheck;
use Frontender\Core\Routes\Middleware\ApiLocale;

class Blueprints extends CoreRoute
{
    protected $group = '/api/blueprints';

    use Authorizable;

    protected function registerCreateRoutes()
    {
        parent::registerCreateRoutes();

        $this->app->put('', function (Request $request, Response $response) {
            $blueprint = $request->getParsedBody();
            $result = \Frontender\Core\Controllers\Blueprints::add($blueprint);
            $blueprint['_id'] = $result->getInsertedId()->__toString();

            return $response
                ->withStatus(200)
                ->withJson($blueprint);
        });
    }

    protected function registerReadRoutes()
    {
        parent::registerReadRoutes();

        $this->app->get('', function (Request $request, Response $response) {
            $json = Adapter::getInstance()->toJSON(
                \Frontender\Core\Controllers\Blueprints::browse()
            );

            return $response->withJson($json);
        });
    }

    protected function registerUpdateRoutes()
    {
        parent::registerUpdateRoutes(); // TODO: Change the autogenerated stub

        $this->app->post('/preview', function (Request $request, Response $response) {
            $data = $request->getParsedBody();
            $blueprint = json_decode(urldecode($data['data']), true);

            $page = [
                'template' => 'layouts/global.html.twig',
                'containers' => [
                    $blueprint['definition']
                ]
            ];

            $json = \Frontender\Core\Controllers\Pages::sanitize($page);

            try {
                $page = $this->page;
                $this->language->set($request->getQueryParam('locale'));
                //			$page->setName($attributes['page']);
                //			$page->setParameters(['debug' => $this->settings['debug'], 'query' => $request->getQueryParams()]);
                $page->setData($json);
                $page->setRequest($request);
                $page->parseData();

                $response->getBody()->write($page->render());
            } catch (\Exception $e) {
                echo $e->getMessage();
                die('Called');
            } catch (\Error $e) {
                echo $e->getMessage();
                echo '<pre>';
                print_r(array_map(function ($trace) {
                    return $trace['file'] . '::' . $trace['line'];
                }, $e->getTrace()));
                echo '</pre>';
                die();
            }

            return $response;
        });

        $this->app->post('/update', function (Request $request, Response $response) {
            $blueprint = $request->getParsedBody();
            $id = new ObjectId($blueprint['_id']);
            unset($blueprint['_id']);

            Adapter::getInstance()->collection('blueprints')->findOneAndReplace([
                '_id' =>  $id
            ], $blueprint);

            return $response->withStatus(200)->withJson($blueprint);
        });
    }

    public function getGroupMiddleware()
    {
        return [
            new TokenCheck(
                $this->app->getContainer(),
                [
                    'exclude' => [
                        '/api/blueprints/preview'
                    ]
                ]
            ),
            new ApiLocale($this->app->getContainer())
        ];
    }
}
